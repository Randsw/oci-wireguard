---
- name: Check if wg0-server.conf already exists
  ansible.builtin.stat:
    path: /etc/wireguard/wg0.conf
  register: wg0_conf

- name: Generate private and public keys for the client and server
  ansible.builtin.shell: umask 077; wg genkey | tee {{ item }}.private | wg pubkey > {{ item }}.public
  register: key_files
  loop: "{{ range(0, clients) | list }}"
  when: wg0_conf is not defined or not wg0_conf.stat.exists


- name: Register private key file contents
  ansible.builtin.shell: cat {{ item }}.private
  register: private_key_files
  loop: "{{ range(0, clients) | list }}"
  when: wg0_conf is not defined or not wg0_conf.stat.exists

- name: Register public key file contents
  ansible.builtin.shell: cat {{ item }}.public
  register: public_key_files
  loop: "{{ range(0, clients) | list }}"
  when: wg0_conf is not defined or not wg0_conf.stat.exists

- name: Generate directories for client configs
  ansible.builtin.file:
    path: "~/wg_clients/client_{{ item }}"
    state: directory
    owner: root
    group: root
    mode: 0600
  loop: "{{ range(1, clients) | list }}"
  when: wg0_conf is not defined or not wg0_conf.stat.exists

- name: Generate client configs
  ansible.builtin.template:
    src: "templates/client.conf.j2"
    dest: "~/wg_clients/client_{{ item }}/wg0-client.conf"
    owner: root
    group: root
    mode: 0600
  loop: "{{ range(1, clients) | list }}"
  when: wg0_conf is not defined or not wg0_conf.stat.exists

- name: Stop any running Wireguard service
  ansible.builtin.systemd:
    name: wg-quick@wg0.service
    state: stopped
  when: wg0_conf is not defined or not wg0_conf.stat.exists

- name: Generate server config
  ansible.builtin.template:
    src: "templates/server.conf.j2"
    dest: "/etc/wireguard/wg0.conf"
    owner: root
    group: root
    mode: 0600
  when: wg0_conf.stat is not defined or not wg0_conf.stat.exists

- name: Print server public key
  ansible.builtin.debug:
    var: public_key_files.results[0].stdout
  when: wg0_conf.stat is not defined or not wg0_conf.stat.exists

- name: Enable wireguard interface
  ansible.builtin.systemd:
    name: wg-quick@wg0
    enabled: yes
    state: started

- name: Register the clients on the vpn server
  ansible.builtin.shell: wg set wg0 peer {{ public_key_files.results[item|int].stdout }} allowed-ips {{ vpn_network }}.{{ item|int + 1 }}/32
  loop: "{{ range(1, clients) | list }}"
  when: wg0_conf is not defined or not wg0_conf.stat.exists

- name: Restart the VPN service to save changes
  ansible.builtin.systemd:
    name: wg-quick@wg0.service
    state: restarted
  when: wg0_conf is not defined or not wg0_conf.stat.exists
